name: "Release"

on:
  workflow_dispatch: {}
  repository_dispatch:
    types:
      - release

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: 'true'
          token: ${{ secrets.ORG_GITHUB_TOKEN }}
      - name: Fetch All Tags
        run: git fetch --force --tags
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.19
      - name: Cache Go modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Import GPG Key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
      - name: Login to Public ECR
        uses: docker/login-action@v2
        with:
          registry: public.ecr.aws
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        env:
          AWS_REGION: us-east-1
      - name: Set Release Version
        id: version
        run: |
          echo "::set-output name=RELEASE_VERSION::$(date +v%Y.%-m.%-d)"
      - name: Cache Docker Layers
        run: docker pull public.ecr.aws/opslevel/cli:v2022.04.22 || true
      - name: Ensure Release Does Not Exist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release delete ${{ steps.version.outputs.RELEASE_VERSION }} || true
      - name: Ensure Changelog
        run: |
          git config user.name "OpsLevel Bots"
          git config user.email "bots@opslevel.com"
          if test -f ./.changes/${{ steps.version.outputs.RELEASE_VERSION }}.md
          then
            echo "Skip Changie..."
          else
            go install github.com/miniscruff/changie@latest
            changie batch ${{ steps.version.outputs.RELEASE_VERSION }}
            changie merge
            git add .
            git commit -m "Cut Release '${{ steps.version.outputs.RELEASE_VERSION }}'"
            git push origin HEAD
          fi
          git tag -f ${{ steps.version.outputs.RELEASE_VERSION }} -m "Cut Release '${{ steps.version.outputs.RELEASE_VERSION }}'"
          git push -f origin refs/tags/${{ steps.version.outputs.RELEASE_VERSION }}
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2.7.0
        with:
          args: release --rm-dist --release-notes=../.changes/${{ steps.version.outputs.RELEASE_VERSION }}.md
          workdir: ./src
        env:
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ORG_GITHUB_TOKEN: ${{ secrets.ORG_GITHUB_TOKEN }}
      - name: Report Release To OpsLevel
        uses: opslevel/report-deploy-github-action@v0.5.0
        with:
          integration_url: ${{ secrets.DEPLOY_INTEGRATION_URL }}
          service: "opslevel_cli"
