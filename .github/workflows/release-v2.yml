name: "Release V2"

on:
  workflow_dispatch:
    inputs:
      release-version:
        required: true
        description: "The release version to use IE: v2022.05.12"

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'true'
      - name: Fetch All Tags
        run: git fetch --force --tags
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17
      - name: Ensure Changelog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if test -f ./.changes/${{ github.event.inputs.release-version }}.md
          then
            echo "Skip Changie..."
            echo "Ensure Release Does Not Exist"
            gh release delete ${{ github.event.inputs.release-version }} || true
            echo "Ensure Tag Does Not Exist"
            if [ "$(git tag -l ${{ github.event.inputs.release-version }})" == "${{ github.event.inputs.release-version }}" ]; then
              git tag -d ${{ github.event.inputs.release-version }}
              git push --delete origin ${{ github.event.inputs.release-version }}
            fi
          else
            go install github.com/miniscruff/changie@latest
            changie batch ${{ github.event.inputs.release-version }}
            changie merge
            git config user.name "OpsLevel Bots"
            git config user.email "bots@opslevel.com"
            git add .
            git commit -m "Cut Release '${{ github.event.inputs.release-version }}'"
            git tag -f ${{ github.event.inputs.release-version }} -m "Cut Release '${{ github.event.inputs.release-version }}'"
            git push origin HEAD
            git push origin refs/tags/${{ github.event.inputs.release-version }}
          fi
      - name: Import GPG Key
        id: import_gpg
        uses: hashicorp/ghaction-import-gpg@v2.1.0
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2.7.0
        with:
          args: release --rm-dist --release-notes=../.changes/${{ github.event.inputs.release-version }}.md
          workdir: ./src
        env:
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Report Release To OpsLevel
        uses: opslevel/report-deploy-github-action@v0.2.0
        with:
          integration_url: ${{ secrets.DEPLOY_INTEGRATION_URL }}
          service: "opslevel_terraform_provider"
